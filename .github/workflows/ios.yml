name: 📱 iOs Sdk

on:
  push:
    branches:
      - master
      - ci
    tags:
  pull_request:
    branches:
      - master


jobs:
  build-sdk:

    runs-on: macOS-latest
    strategy:
      fail-fast: false
      matrix:
        qt-version: ['5.15.2']
        ios-deployment-architecture: ['arm64', 'x86_64']
        ios-deployment-target: ['12.0']

    outputs:
      matrix: ${{ toJSON(job.strategy.matrix) }}

    env:
      IOS_MIN_SDK_VERSION: ${{ matrix.ios-deployment-target }}
      ROOT_OUT_PATH: ${{ github.workspace }}/build
      OSGeo4I_PATH: ${{ github.workspace }}/build/OSGeo4I
      QT_VERSION: ${{ matrix.qt-version }}
      IOS_CONFIG: ios.config.conf
      IOS_SCRIPT: ${{ github.workspace }}/ios/
      ARCHES: ${{ matrix.ios-deployment-architecture }}

    steps:
      - uses: actions/checkout@v2
          
      - name: Prepare build cache for branch/tag
        # use a fork of actions/cache@v2 to upload cache even when the build or test failed
        uses: pat-s/always-upload-cache@v2.1.5
        with:
          path: ${{ github.workspace }}/build
          # The branch or tag ref that triggered the workflow run. For branches this in the format refs/heads/<branch_name>, and for tags it is refs/tags/<tag_name>
          key: cache-v5-${{ matrix.qt-version }}-${{ github.ref }}-${{ matrix.ios-deployment-architecture }}-${{ github.sha }}
          restore-keys: |
            cache-v5-${{ matrix.qt-version }}-${{ github.ref }}-${{ matrix.ios-deployment-architecture }}-
            cache-v5-${{ matrix.qt-version }}-refs/heads/master-${{ matrix.ios-deployment-architecture }}-

      - name: ⬆️ Install Build Dependencies
        run: |
          brew install bison flex automake shtool gtk-doc
          echo "/usr/local/opt/flex/bin" >> $GITHUB_PATH
          echo "/usr/local/opt/bison/bin" >> $GITHUB_PATH

      - name: Cache Qt
        id: cache-qt
        uses: pat-s/always-upload-cache@v2.1.5
        with:
          path: ${{ github.workspace }}/Qt
          key: ${{ runner.os }}-QtCache-${{ matrix.qt-version }}-ios

      - name: ⬆️ Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt-version }}
          target: ios
          # Create $GITHUB_WORKSPACE/Qt/5.15.1/ios
          dir: ${{ github.workspace }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: 🔨 Build Sdk
        run: |
          echo "export QT_BASE=${Qt5_Dir}/../" > ${IOS_SCRIPT}/${IOS_CONFIG}
          cat ${IOS_SCRIPT}/${IOS_CONFIG}
          ${IOS_SCRIPT}/distribute.sh -mqgis

      - name: 🔨 Copy ios cmake toolchain to sdk
        run: |
          mkdir -p ${{ env.OSGeo4I_PATH }}/cmake/
          cp ${{ github.workspace }}/ios/tools/ios.toolchain.cmake ${{ env.OSGeo4I_PATH }}/cmake/

      - name: 📦 Zip sdk
        run: |
          ZIP_NAME=OSGeo4I-Qt${{ matrix.qt-version }}-${{ matrix.ios-deployment-architecture }}-${{ github.run_number }}.zip
          echo "ZIP_NAME=${ZIP_NAME}" >> $GITHUB_ENV
          cd ${{ env.ROOT_OUT_PATH }}
          zip -r ${{ github.workspace }}/${ZIP_NAME} OSGeo4I

      - name: 📦 Upload Sdk in Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: ${{ github.workspace }}/${{ env.ZIP_NAME }}

      - name: 🚀 Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.run_number }}
          allowUpdates: true
          artifacts: ${{ env.ZIP_NAME }}
          artifactContentType: application/zip
          token: ${{ secrets.GITHUB_TOKEN }}

  update-qfield-sdk:
    needs: build-sdk
    runs-on: ubuntu-latest
    steps:
      - name: Fetch QField source code
        uses: actions/checkout@v2
        with:
          repository: opengisch/QField
          path: qfield-src
          token: ${{ secrets.GEONINJA_PAT }}

      - name: update SDK version
        run: |
          cd qfield-src
          sed -r -i "s/sdk-version: \['[0-9]+'\]/sdk-version: ['${{ github.run_number }}']/" .github/workflows/ios.yml
          git config --global user.email "<noreply@github.com"
          git config --global user.name "GitHub"
          git add .github/workflows/ios.yml
          git commit -m "bump iOS SDK to ${{ github.run_number }}"

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          path: qfield-src
          title: Update QField SDK
          token: ${{ secrets.GEONINJA_PAT }}
          body: |
            Automatically create from qfield-sdk release https://github.com/opengisch/qfield-sdk/releases/tag/${{ github.run_number }}
